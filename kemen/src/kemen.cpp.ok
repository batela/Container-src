#include "../include/kemen.h"
extern bool verbose;

BSCLEnlace *bscl = new BSCLEnlace (17,10);
log4cpp::Category &log  = log4cpp::Category::getRoot();
void * httpservermanager(void * p)
{
	uint16_t port=8080;
	BSCLEnlace *bscl = (BSCLEnlace *)p;
  const char *key	="key.pem";
  const char *cert="cert.pem";
  bool secure=false;
	port=9898;
	std::cout << "Using port " << port << std::endl;
    if (secure) {
    	std::cout << "Key: " << key << " Certificate: " << cert << std::endl;
    }

    //
    // Use builder to define webserver configuration options
    //
    create_webserver cw = create_webserver(port).max_threads(5);

    if (secure) {
        cw.use_ssl().https_mem_key(key).https_mem_cert(cert);
    }

    //

    // Create webserver using the configured options
    //
	webserver ws = cw;

    //
    // Create and register service resource available at /service
    //
	service_resource res;
	ws.register_resource("/service",&res,true);

    //
    // Start and block the webserver
    //
	ws.start(true);

	return 0;
}

int PesaContainer (Explorador * exBascula){
	int res = 0;
	int contador = 0;
	log.info("%s: %s",__FILE__, "Comienza pesaje");
	((BSCLEnlace*)exBascula->getEnlace())->getBSCL()->SetEstable(false);
	while (((BSCLEnlace*)exBascula->getEnlace())->getBSCL()->GetEstable()==false){
		sleep (1);
		if (contador++ >= 10) break;
	}
	if (((BSCLEnlace*)exBascula->getEnlace())->getBSCL()->GetEstable()==false) res = 1;
	return res;
}

int main(int argc, char **argv) {

	pthread_t idThLector;

	//log4cpp::Category &log  = log4cpp::Category::getRoot();
	log4cpp::PropertyConfigurator::configure( Env::getInstance("/home/batela/bascula/cnf/bascula.cnf")->GetValue("logproperties") );

	ESTADO estado;
	DBPesaje db("/home/batela/bascula/db/kemen.db");
	log.info("%s: %s",__FILE__, "Iniciando aplicacion de gruas...");

	bscl->Configure(Env::getInstance()->GetValue("pesajescorrectos"), Env::getInstance()->GetValue("margenpesajes"));

	Env::getInstance()->GetValue("puertobascula");
  //baudrate,char_size,parity,stopbits
	int baudios 		= atoi(Env::getInstance()->GetValue("baudiosbascula").data());
	int bitsdatos 	= atoi(Env::getInstance()->GetValue("bitsbascula").data());
	int bitsparada 	= atoi(Env::getInstance()->GetValue("bitsparadabascula").data());
	int ioCarro  = atoi(Env::getInstance()->GetValue("iocarroenvia").data())-1; //restamos 1 para referencia en 0
	int ioPalpa  = atoi(Env::getInstance()->GetValue("iopalpadores").data())-1;
	int ioTwisl  = atoi(Env::getInstance()->GetValue("iotwislock").data())-1;
	int ioSubir  = atoi(Env::getInstance()->GetValue("iomandosubir").data())-1;

	RS232Puerto *bsclPort = new RS232Puerto(Env::getInstance()->GetValue("puertobascula"), baudios,bitsdatos,0,bitsparada);
	Explorador 	*exBSCL		= new Explorador (bscl,bsclPort,true);

	//PesaContainer(exBSCL);

	int iret1 = pthread_create( &idThLector, NULL, httpservermanager,NULL);

	IOEnlace *io = new IOEnlace();
	MODBUSPuerto *moxaPort = new MODBUSPuerto(Env::getInstance()->GetValue("puertomoxa"), 9600);
	MODBUSExplorador *exGarra = new MODBUSExplorador (io,moxaPort);
	bool pesajeHecho = false ;

	while (true){
		estado=CARRO_ENVIA;
		if (exGarra->Explora() == 0){
			log.info("%s: %s",__FILE__, "Entrando en bucle de garra");
			for (int i= 0 ;i < 4 && estado !=FIN ; i++){
				int res = io->GetLocks()->GetLock(i+1);
				log.info("%s: %s %d %s %d",__FILE__, "Estado lock numero: ",i," valor: ",res );
				switch(estado){
					case CARRO_ENVIA:
						if (res == 0){
							log.info("%s: %s",__FILE__, "CARRO NO EN VIA..SALIENDO");
							estado = FIN;
						}
						else{
							log.info("%s: %s",__FILE__, "CARRO NO EN VIA");
							estado = PALPADORES_APOYO;
						}
					break;
					case PALPADORES_APOYO:
						if (res == 0){
							log.info("%s: %s",__FILE__, "PALPADORES NO APOYO..SALIENDO");
							pesajeHecho = false ;
							estado = FIN;
						}
						else{
							log.info("%s: %s",__FILE__, "PALPADORES APOYO");
							estado = LOCK_CERRADO;
						}
					break;
					case LOCK_CERRADO:
						if (res == 0){
							log.info("%s: %s",__FILE__, "LOCK NO CERRADO..SALIENDO");
							//pesajeHecho = false ;
							estado = FIN;
						}
						else{
							log.info("%s: %s",__FILE__, "LOCK CERRADO");
							estado = SUBIENDO;
						}
					break;
					case SUBIENDO:
						if ((pesajeHecho == false) && (PesaContainer(exBSCL) == 0)){
							//estado = PESADO;
							db.Open();
							db.InsertData(1,bscl->getBSCL()->GetPeso());
							db.Close();

							pesajeHecho = true;
							log.info("%s: %s",__FILE__, "CONTAINER PESADO");
							log.info("%s: %s %d",__FILE__, "Base de datos actualizada",bscl->getBSCL()->GetPeso());
							estado = FIN;
						}
						else{
							estado = ERROR;
							log.info("%s: %s",__FILE__, "CONTAINER NO PESADO..SALIENDO");
						}
						//estado = PESADO;
					break;
					case PESADO:
							db.Open();
							db.InsertData(1,bscl->getBSCL()->GetPeso());
							db.Close();

							pesajeHecho = true;
							log.info("%s: %s %d",__FILE__, "Base de datos actualizada",bscl->getBSCL()->GetPeso());
							estado = FIN;
					break;
					case ERROR:
						estado = FIN;
					break;
					case FIN:
						log.info("%s: %s",__FILE__, "Saliendo de bucle");
					break;
				}//swtich
			} //for
		}//if
		sleep (1);
	}
	return 0;
}
